myVar = 100 #(다른 프로그램과 동일)
myVar <- 100 #(다른 프로그램과 차별)
100 -> myVar
myVar
print(myVar)
cat("변수의 값은 :",myVar)
var1 = seq(1,100,3)
var1
a = 100
b = 100L
print(a)
print(b)
print(type(a))
is.numeric(a)
is.numeric(b)
is.integer(a)
is.integer(b)
# 연산자에 대해서 알아보아요
# operator
var1 = 100 #(numeric. 우리 눈에는 정수지만 실수. L을 붙여야 정수로 인식)
var2 = 3
result <- var1 / var2
result
options(digits = 5) #(출력 범위 설정)
result
# 연산자에 대해서 알아보아요
# operator
var1 = 100 #(numeric. 우리 눈에는 정수지만 실수. L을 붙여야 정수로 인식)
var2 = 3
var3 = 100L
is.integer(var1)
is.integer(var3)
mode(a)
mode(b)
# R이 제공하는 기본함수 중에 데이터 타입을 알아보는 함수 => mode()
var1 = "이것은 소리없는 아우성!!"
mode(var1)
# is계열의 함수 => is.character() #(T.F로 출력)
is.character(var1)
is.null()
is.na()
# R은 하나의 데이터 타입을 다른 데이터 타입으로 바꿀 수 있어요!!
# as계열의 함수를 제공해줘요
var1 = "3.141592"
as.double(var1) #(실수로. integer정수로)
as.integer(var1)
var2 = TRUE
as.numeric(var2) #(TRUE 1, FALSE 0)
var3 = 100
as.logical(var3) #(0이외의 숫자는 TRUE)
# package
# R은 처음 설치할 때 base package가 같이 설치돼요!!
# 추가적인 기능을 이용하기 위해서 외부 package를 찾아서 설치해야 해요
# 그래프를 그리기 위해서 많이 사용하는 package는 ggplot2
# package를 설치하기 위해서
install.packages("ggplot2") # (package 형태를 문자형태로)
# 설치된 package를 메모리에 load해야 사용할 수 있어요
library(ggplot2)
require(ggplot2)
# 간단한 빈도를 나타내는 막대그래프를 그리기 위해 vector 하나 만들어 보아요
var1 = c("a", "b", "c", "a", "b", "a")
# package안의 함수를 이용해서 빈도그래프를 그려보아요
qplot(var1) # q는 quick
# package가 설치된 폴더 경로를 알아보아요
.libPaths("ggplot2")
# package가 설치된 폴더 경로를 알아보아요
.libPaths("ggplot2")
.libPaths()
# vector를 생성하는 방법
# 1. combine 함수를 사용해서 생성 ( c() )
#    일반적으로 규칙성이 없는 데이터를 이용해서 vector를 생성할 때 이용
#    vector를 이용해서 다른 vector를 만들 수 있어요
var1 = c(1,2,6,9,10)
var1
mode(var1) #(numeric)
var2 = c(TRUE,FALSE,TRUE)
var2
var3 = c("홍길동", "김길동", "최길동")
var3
var4 = c(200,TRUE,"아우성!!") #(데이터 형태가 다를 때 우선순위대로)
var4
var5 = c(var1,var2) # 1 2 6 9 10 1 0 1
# vector의 결합 #(2개의 vector를 연결해서 사용)
var5
# 2) : 을 이용해서 vector를 생성할 수 있어요
#    numeric에서만 사용가능하고 1씩 증가하거나 감소하는 숫자의 집합을 vector로 만들 때 사용
#    start:end 형태로 사용되고 둘 다 inclusive
var1 = 1:5 #(콜론의 일반형 seq)
var1
var1 = 1:5; var1
var2 = 5:1; var2
var3 = 3.4:10; var3
# 3) seq()를 이용해서 vector를 생성할 수 있어요.
#    : 의 일반형으로 등차수열을 생성해서 vector화시킬 때 사용
var1 = seq(from=1,to=10,by=3) #readability가 좋아요 #(from,to,by는 속성. 생략가능)
var1
var1 = seq(1,10,3)
var1
# 4) rep()를 이용해서 vector를 새성할 수 있어요
#    replicate의 약자
#    지정된 숫자만큼 반복해서 vector를 생성
var1 = rep(1:3, times=3) # times는 생략이 가능
var1                     # 1 2 3 1 2 3 1 2 3
var2 = rep(1:3, each=3)
var2                     # 1 1 1 2 2 2 3 3 3
# vector안의 데이터의 개수를 알아내려면?
# length() 함수를 이용.
var1 = c(1:10)
var1
length(var1)    # 10
# length를 다른 의미로 사용할 수 있어요
var1 = seq(1,100, by=3); var1
var1 = seq(1,100, length=3); var1 #(3개로. 2개의 구간)
var1 = seq(1,100, length=7); var1
# vector에서 데이터 추출
# vector의 사용은 []를 이용해서 데이터 추출
var1 = c(67,90,87,50,100)
var1[1] # vector의 제일 처음 원소를 추출
var1[length(var1)] # vector의 제일마지막 원소를 추출 #(length이용)
var1[2:4] # vector를 만들기위해서 사용한 :, c(), seq(), rep()를 vector 요소를 access하기위한 용도로 사용할 수 있어요
var1[c(1,5)]
var1[seq(1,4)]
var1[6]        # NA
var1[-1]       # "-"는 제외의 의미
var1[-c(1:3)]  # 50 100 #(R 차별. Python에서는다름)
# vector 데이터의 이름
var1 = c(67,90,50)
var1
names(var1) # vector의 각 데이터에 붙은 이름은 없어요
names(var1) = c("국어", "영어", "수학") # name 설정
var1
var1[2] # index를 이용해서 vector 데이터를 추출
var1["영어"] # name을 통해서 vector 데이터를 추출
# vector의 연산
# 수치형 vector는 scalar를 이용하여 사칙연산을 할 수 있어요.
# 그리고 vector와 vector간의 연산도 수행할 수 있어요.
var1 <- 1:3   # 1 2 3
var2 <- 4:6   # 4 5 6
var1; var2
var1 * 2      # 2 4 6
var1 + 10     # 11 12 13
var1 + var2   # 5 7 9
var3 = 5:10   # 5 6 7 8 9 10
var1 + var3   # 1 2 3 1 2 3    # recycling rule
var1 = c(1:5)
var2 = c(3:7)
union(var1,var2)
intersect(var1,var2)
setdiff(var1,var2)
setdiff(var2,var1)
var1 = 1:3
var2 = 1:3
var3 = c(1,3,2)
var3 - c(1,3,2,1,1,1,3,3)
identical(var1,var2) # 같은 vector이기 때문에 TRUE
identical(var1,var2) # 같은 vector이기 때문에 TRUE
identical(var1,var3) # 같은 vector가 아니에요.
setequal(var1,var3)  # vector의 내용이 같아요
# 요소가 없는 vector
var1 = vector(mode = "numeric", length = 10)
var1
var1 = vector(mode = "logical", length = 10)
var1
var1 = vector(mode = "character", length = 10)
var1
# matrix : 동일한 data type을 가지는 2차원 형태의 자료구조
# matrix의 생성
var1 = matrix(c(1:5)) # matrix의 생성 기준은 열
# 5행 1열짜리 matrix가 생성
var1 # ([,1] 모든 행의 1열)
var1 = matrix(c(1:10), nrow = 2)
var1 # 2행 5열짜리 matrix
var1 = matrix(c(1:10), nrow = 3)
var1 # 3헹 4열짜리 matrix
var1 = matrix(c(1:10), nrow = 2, byrow = T)
var1
# vector를 연결해서 matrix를 만들 수 있어요
# vector를 가로방향, 세로방향으로 붙여서 2차원 형태로 만들 수 있어요
var1 = c(1,2,3,4)
var2 = c(5,6,7,8)
mat1 = rbind(var1,var2) #(row bind)
mat1
mat2 = cbind(var1,var2) #(column bind)
mat2
var1 = matrix(c(1:21), nrow = 3, ncol = 7)
var1 # 3행 7열짜리 matrix
var1[1,4] #([]추출)
var1[2,] # 2행의 모든 열
var1[,3] # 3열의 모든 행
# 11 12 14 15의 값을 가져오려면?
var1[c(2:3),c(4:5)] #(2,3행 4,5열)
length(var1) #(원소의 개수)
nrow(var1)
ncol(var1)
